{"version":3,"sources":["components/DigitalTimer/index.js","App.js","index.js"],"names":["initialState","minutes","seconds","isTimerRunning","DigitalTimer","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","clearTimerInterval","clearInterval","intervalId","onDecreaseTimerLimitInMinutes","setState","prevState","onIncreaseTimerLimitInMinutes","renderTimerLimitController","_this$state","isButtonsDisabled","_jsxs","className","children","_jsx","disabled","onClick","type","onResetTimer","incrementTimeElapsedInSeconds","_this$state2","onStartOrPauseTimer","_this$state3","setInterval","renderTimerController","startOrPauseImageUrl","startOrPauseAltText","alt","src","getElapsedSecondsInTimeFormat","_this$state4","totalRemainingSeconds","floorMinutes","Math","floor","floorSeconds","stringifiedMinutes","stringifiedSeconds","_createClass","key","value","this","labelText","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9b96019.chunk.js","sourcesContent":["import {Component} from 'react'\nimport './index.css'\n\nconst initialState = {\n  minutes: 25,\n  seconds: 0,\n  isTimerRunning: false,\n}\n\nclass DigitalTimer extends Component {\n  state = initialState\n\n  componentWillUnmount() {\n    this.clearTimerInterval()\n  }\n\n  clearTimerInterval = () => clearInterval(this.intervalId)\n\n  onDecreaseTimerLimitInMinutes = () => {\n    const {minutes} = this.state\n\n    if (minutes > 1) {\n      this.setState(prevState => ({\n        minutes: prevState.minutes - 1,\n      }))\n    }\n  }\n\n  onIncreaseTimerLimitInMinutes = () =>\n    this.setState(prevState => ({\n      minutes: prevState.minutes + 1,\n    }))\n\n  renderTimerLimitController = () => {\n    const {minutes, seconds} = this.state\n    const isButtonsDisabled = seconds > 0\n\n    return (\n      <div className=\"timer-limit-controller-container\">\n        <p className=\"limit-label\">Set Timer limit</p>\n        <div className=\"timer-limit-controller\">\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onDecreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            -\n          </button>\n          <div className=\"limit-label-and-value-container\">\n            <p className=\"limit-value\">{minutes}</p>\n          </div>\n          <button\n            className=\"limit-controller-button\"\n            disabled={isButtonsDisabled}\n            onClick={this.onIncreaseTimerLimitInMinutes}\n            type=\"button\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  onResetTimer = () => {\n    this.clearTimerInterval()\n    this.setState(initialState)\n  }\n\n  incrementTimeElapsedInSeconds = () => {\n    const {minutes, seconds} = this.state\n    const isTimerCompleted = seconds === minutes * 60\n\n    if (isTimerCompleted) {\n      this.clearTimerInterval()\n      this.setState({isTimerRunning: false})\n    } else {\n      this.setState(prevState => ({\n        seconds: prevState.seconds + 1,\n      }))\n    }\n  }\n\n  onStartOrPauseTimer = () => {\n    const {isTimerRunning, seconds, minutes} = this.state\n    const isTimerCompleted = seconds === minutes * 60\n\n    if (isTimerCompleted) {\n      this.setState({seconds: 0})\n    }\n    if (isTimerRunning) {\n      this.clearTimerInterval()\n    } else {\n      this.intervalId = setInterval(this.incrementTimeElapsedInSeconds, 1000)\n    }\n    this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\n  }\n\n  renderTimerController = () => {\n    const {isTimerRunning} = this.state\n    const startOrPauseImageUrl = isTimerRunning\n      ? 'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\n      : 'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\n    const startOrPauseAltText = isTimerRunning ? 'pause icon' : 'play icon'\n\n    return (\n      <div className=\"timer-controller-container\">\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onStartOrPauseTimer}\n          type=\"button\"\n        >\n          <img\n            alt={startOrPauseAltText}\n            className=\"timer-controller-icon\"\n            src={startOrPauseImageUrl}\n          />\n          <p className=\"timer-controller-label\">\n            {isTimerRunning ? 'Pause' : 'Start'}\n          </p>\n        </button>\n        <button\n          className=\"timer-controller-btn\"\n          onClick={this.onResetTimer}\n          type=\"button\"\n        >\n          <img\n            alt=\"reset icon\"\n            className=\"timer-controller-icon\"\n            src=\"https://assets.ccbp.in/frontend/react-js/reset-icon-img.png\"\n          />\n          <p className=\"timer-controller-label\">Reset</p>\n        </button>\n      </div>\n    )\n  }\n\n  getElapsedSecondsInTimeFormat = () => {\n    const {minutes, seconds} = this.state\n    const totalRemainingSeconds = minutes * 60 - seconds\n    const floorMinutes = Math.floor(totalRemainingSeconds / 60)\n    const floorSeconds = Math.floor(totalRemainingSeconds % 60)\n    const stringifiedMinutes =\n      floorMinutes > 9 ? floorMinutes : `0${floorMinutes}`\n    const stringifiedSeconds =\n      floorSeconds > 9 ? floorSeconds : `0${floorSeconds}`\n\n    return `${stringifiedMinutes}:${stringifiedSeconds}`\n  }\n\n  render() {\n    const {isTimerRunning} = this.state\n    const labelText = isTimerRunning ? 'Running' : 'Paused'\n    return (\n      <div className=\"app-container\">\n        <h1 className=\"heading\">Digital Timer</h1>\n        <div className=\"digital-timer-container\">\n          <div className=\"timer-display-container\">\n            <div className=\"elapsed-time-container\">\n              <h1 className=\"elapsed-time\">\n                {this.getElapsedSecondsInTimeFormat()}\n              </h1>\n              <p className=\"timer-state\">{labelText}</p>\n            </div>\n          </div>\n          <div className=\"controls-container\">\n            {this.renderTimerController()}\n            {this.renderTimerLimitController()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DigitalTimer\n","import DigitalTimer from './components/DigitalTimer'\n\nimport './App.css'\n\nconst App = () => <DigitalTimer />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}